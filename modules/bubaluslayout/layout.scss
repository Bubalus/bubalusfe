// --------------------------------------------
// BubalusFE - The front-end development framework
//
/* Layout - 一套基于百分比的响应式栅格布局系统及方法 */
// --------------------------------------------

// ----------------------
// Grid 变量
// ----------------------


// 设置栅格系统中 列 的数量
$grid-columns:              12 !default;
// 栅格间距值，即列与列之间的间距值
$grid-gutter-width:         20px !default;
// 栅格响应点
$grid-float-breakpoint:     $screen-table !default;
// Container sizes
// --------------------------------------------------

// Small screen / tablet
$container-table:            ((720px + $grid-gutter-width)) !default;

// Medium screen / desktop
$container-desktop:           ((940px + $grid-gutter-width)) !default;

// Large screen / wide desktop
$container-large-desktop:        ((1140px + $grid-gutter-width)) !default;




// ----------------------
// Grid 方法
// ----------------------

// 用于主容器设置居中并清除浮动
@mixin container-fixed() {
  margin-right: auto;
  margin-left: auto;
  padding-left:  ($grid-gutter-width / 2);
  padding-right: ($grid-gutter-width / 2);
  @include clear();
}

// 用于为一组 列式栅格 创建一个水平容器,并清除列栅格的浮动
@mixin make-row($gutter: $grid-gutter-width) {
  margin-left:  ($gutter / -2);
  margin-right: ($gutter / -2);
  @include clear();
}
// Generate the extra small columns
@mixin make-xs-column($columns, $gutter: $grid-gutter-width) {
  position: relative;
  float: left;
  width: percentage(($columns / $grid-columns));
  // Prevent columns from collapsing when empty
  min-height: 1px;
  // Inner gutter via padding
  padding-left:  ($gutter / 2);
  padding-right: ($gutter / 2);
}

// Generate the small columns
@mixin make-sm-column($columns, $gutter: $grid-gutter-width) {
  position: relative;
  // Prevent columns from collapsing when empty
  min-height: 1px;
  // Inner gutter via padding
  padding-left:  ($gutter / 2);
  padding-right: ($gutter / 2);

  // Calculate width based on number of columns available
  @media (min-width: $screen-sm) {
    float: left;
    width: percentage(($columns / $grid-columns));
  }
}
// Generate the medium columns
@mixin make-md-column($columns, $gutter: $grid-gutter-width) {
  position: relative;
  // Prevent columns from collapsing when empty
  min-height: 1px;
  // Inner gutter via padding
  padding-left:  ($gutter / 2);
  padding-right: ($gutter / 2);

  // Calculate width based on number of columns available
  @media (min-width: $screen-md) {
    float: left;
    width: percentage(($columns / $grid-columns));
  }
}

// Generate the large columns
@mixin make-lg-column($columns, $gutter: $grid-gutter-width) {
  position: relative;
  // Prevent columns from collapsing when empty
  min-height: 1px;
  // Inner gutter via padding
  padding-left:  ($gutter / 2);
  padding-right: ($gutter / 2);

  // Calculate width based on number of columns available
  @media (min-width: $screen-lg) {
    float: left;
    width: percentage(($columns / $grid-columns));
  }
}

// ----------------------
// Grid 样式
// ----------------------

// 主布局容器
header, footer, nav, #main {
  position:relative;
}
.container {
  @include container-fixed();
}

// 为一组 列式栅格 创建一个行容器,并清除列栅格的浮动
.row {
  @include make-row();
}

.column {
  float: left;
  position: relative;
  min-height: 1px; // 防止没有内容时列塌陷而造成错位
  // 通过设置填充来产生列与列之间的间距，内容不会紧挨在一起
  padding-left:  ($grid-gutter-width / 2);
  padding-right: ($grid-gutter-width / 2);
}

// Extra small grid
//
// Grid classes for extra small devices like smartphones. No offset, push, or
// pull classes are present here due to the size of the target.
//
// Note that `.col-xs-12` doesn't get floated on purpose—there's no need since
// it's full-width.

.col-1  { width: percentage((1 / $grid-columns)); }
.col-2  { width: percentage((2 / $grid-columns)); }
.col-3  { width: percentage((3 / $grid-columns)); }
.col-4  { width: percentage((4 / $grid-columns)); }
.col-5  { width: percentage((5 / $grid-columns)); }
.col-6  { width: percentage((6 / $grid-columns)); }
.col-7  { width: percentage((7 / $grid-columns)); }
.col-8  { width: percentage((8 / $grid-columns)); }
.col-9  { width: percentage((9 / $grid-columns)); }
.col-10 { width: percentage((10/ $grid-columns)); }
.col-11 { width: percentage((11/ $grid-columns)); }
.col-12 { width: 100%; float: none; }

// Small grid
//
// Columns, offsets, pushes, and pulls for the small device range, from phones
// to tablets.
//
// Note that `.col-sm-12` doesn't get floated on purpose—there's no need since
// it's full-width.

@media (min-width: $screen-table) {
  .container {
    max-width: $container-table;
  }
  .col-table-1  { width: percentage((1 / $grid-columns)); }
  .col-table-2  { width: percentage((2 / $grid-columns)); }
  .col-table-3  { width: percentage((3 / $grid-columns)); }
  .col-table-4  { width: percentage((4 / $grid-columns)); }
  .col-table-5  { width: percentage((5 / $grid-columns)); }
  .col-table-6  { width: percentage((6 / $grid-columns)); }
  .col-table-7  { width: percentage((7 / $grid-columns)); }
  .col-table-8  { width: percentage((8 / $grid-columns)); }
  .col-table-9  { width: percentage((9 / $grid-columns)); }
  .col-table-10 { width: percentage((10/ $grid-columns)); }
  .col-table-11 { width: percentage((11/ $grid-columns)); }
  .col-table-12 { width: 100%; float: none; }
}


// Medium grid
//
// Columns, offsets, pushes, and pulls for the desktop device range.
//
// Note that `.col-md-12` doesn't get floated on purpose—there's no need since
// it's full-width.

@media (min-width: $screen-desktop) {
  .container {
    max-width: $container-desktop;
  }
  .col-desktop-1  { width: percentage((1 / $grid-columns)); }
  .col-desktop-2  { width: percentage((2 / $grid-columns)); }
  .col-desktop-3  { width: percentage((3 / $grid-columns)); }
  .col-desktop-4  { width: percentage((4 / $grid-columns)); }
  .col-desktop-5  { width: percentage((5 / $grid-columns)); }
  .col-desktop-6  { width: percentage((6 / $grid-columns)); }
  .col-desktop-7  { width: percentage((7 / $grid-columns)); }
  .col-desktop-8  { width: percentage((8 / $grid-columns)); }
  .col-desktop-9  { width: percentage((9 / $grid-columns)); }
  .col-desktop-10 { width: percentage((10/ $grid-columns)); }
  .col-desktop-11 { width: percentage((11/ $grid-columns)); }
  .col-desktop-12 { width: 100%; float: none; }
}


// Large grid
//
// Columns, offsets, pushes, and pulls for the large desktop device range.
//
// Note that `.col-lg-12` doesn't get floated on purpose—there's no need since
// it's full-width.

@media (min-width: $screen-notebook) {
  .container {
    max-width: $container-large-desktop;
  }

  .col-notebook-1  { width: percentage((1 / $grid-columns)); }
  .col-notebook-2  { width: percentage((2 / $grid-columns)); }
  .col-notebook-3  { width: percentage((3 / $grid-columns)); }
  .col-notebook-4  { width: percentage((4 / $grid-columns)); }
  .col-notebook-5  { width: percentage((5 / $grid-columns)); }
  .col-notebook-6  { width: percentage((6 / $grid-columns)); }
  .col-notebook-7  { width: percentage((7 / $grid-columns)); }
  .col-notebook-8  { width: percentage((8 / $grid-columns)); }
  .col-notebook-9  { width: percentage((9 / $grid-columns)); }
  .col-notebook-10 { width: percentage((10/ $grid-columns)); }
  .col-notebook-11 { width: percentage((11/ $grid-columns)); }
  .col-notebook-12 { width: 100%; float: none; }
  
}

// 平衡柵格高度
.equalize { overflow:hidden; }

.equalize > [class*="col"] {
    padding-bottom:32767px;
    margin-bottom:-32767px;
}

/* END Layout */