// --------------------------------------------
// BubalusFE - The front-end development framework
//
/* Layout - 一套基于百分比的响应式栅格布局系统及方法 */
// --------------------------------------------

// ----------------------
// Grid 变量
// ----------------------

// Container sizes
// --------------------------------------------------

// Small screen / table
$container-table:          728px !default;

// Medium screen / desktop
$container-desktop:         940px !default;

// Large screen / wide desktop
$container-large-desktop:   1200px !default;


// 设置栅格系统中 列 的数量
$grid-columns:              12 !default;
// 栅格间距值，即列与列之间的间距值
$grid-gutter-width:         20px !default;
// 栅格响应点
$grid-float-breakpoint:     $screen-table !default;



// ----------------------
// Grid 方法
// ----------------------

// 用于主容器设置居中并清除浮动
@mixin container-fixed() {
  margin-right: auto;
  margin-left: auto;
  @include clear();
}

// 用于为一组 列式栅格 创建一个水平容器,并清除列栅格的浮动
@mixin make-row($gutter: $grid-gutter-width) {
  @include clear();

  .container & {
    @media (min-width: $screen-phone) {
      margin-left:  ($gutter / -2);
      margin-right: ($gutter / -2);
    }
  }

  // // 嵌套的水平容器设置负值空白边，避免产生重复的栅格间距
  .row {
    margin-left:  ($gutter / -2);
    margin-right: ($gutter / -2);
  }
}

// 栅格公用样式
@mixin make-column($columns, $gutter: $grid-gutter-width) {
  position: relative;
  min-height: 1px; // 防止没有内容时列塌陷而造成错位
  // 通过设置填充来产生列与列之间的间距，内容不会紧挨在一起
  padding-left:  ($gutter / 2);
  padding-right: ($gutter / 2);

  // 计算到达相应点后的列宽
  @media (min-width: $grid-float-breakpoint) {
    float: left;
    width: percentage(($columns / $grid-columns));
  }
}

// Generate the small columns
@mixin make-small-column($columns, $gutter: $grid-gutter-width) {
  position: relative;
  float: left;
  // Prevent columns from collapsing when empty
  min-height: 1px;
  // Inner gutter via padding
  padding-left:  ($gutter / 2);
  padding-right: ($gutter / 2);
  $max-width: ($grid-float-breakpoint - 1);

  // Calculate width based on number of columns available
  @media (max-width: $max-width) {
    width: percentage(($columns / $grid-columns));
  }
}

// 生成横移列
@mixin make-column-offset($columns) {
  @media (min-width: $grid-float-breakpoint) {
    margin-left: percentage(($columns / $grid-columns));
  }
}

// 用于栅格排序
@mixin make-column-push($columns) {
  @media (min-width: $grid-float-breakpoint) {
    left: percentage(($columns / $grid-columns));
  }
}
@mixin make-column-pull($columns) {
  @media (min-width: $grid-float-breakpoint) {
    right: percentage(($columns / $grid-columns));
  }
}




// ----------------------
// Grid 样式
// ----------------------

// 主布局容器
header, footer, nav, #main {
  position:relative;
}
.container {
  @include container-fixed();
}

.col-1,
.col-2,
.col-3,
.col-4,
.col-5,
.col-6,
.col-7,
.col-8,
.col-9,
.col-10,
.col-11,
.col-12,
.col-table-1,
.col-table-2,
.col-table-3,
.col-table-4,
.col-table-5,
.col-table-6,
.col-table-7,
.col-table-8,
.col-table-9,
.col-table-10,
.col-table-11,
.col-table-12,
.col-desktop-1,
.col-desktop-2,
.col-desktop-3,
.col-desktop-4,
.col-desktop-5,
.col-desktop-6,
.col-desktop-7,
.col-desktop-8,
.col-desktop-9,
.col-desktop-10,
.col-desktop-11,
.col-desktop-12 {
  position: relative;
  min-height: 1px; // 防止没有内容时列塌陷而造成错位
  // 通过设置填充来产生列与列之间的间距，内容不会紧挨在一起
  padding-left:  ($grid-gutter-width / 2);
  padding-right: ($grid-gutter-width / 2);
}

// 为一组 列式栅格 创建一个行容器,并清除列栅格的浮动
.row {
  @include make-row();
}

// 小列和中等列
.col-1,
.col-2,
.col-3,
.col-4,
.col-5,
.col-6,
.col-7,
.col-8,
.col-9,
.col-10,
.col-11,
.col-12 {
  float: left;
}
@for $i from 1 through $grid-columns {
  .col-#{$i}  { width: percentage(($i / $grid-columns)); }
}

@media (min-width: $screen-table) and (max-width: $screen-tablet-max) {
  .container {
    max-width: $container-table;
  }
  .col-table-1,
  .col-table-2,
  .col-table-3,
  .col-table-4,
  .col-table-5,
  .col-table-6,
  .col-table-7,
  .col-table-8,
  .col-table-9,
  .col-table-10,
  .col-table-11,
  .col-table-12 {
    float: left;
  }


  @for $i from 1 through $grid-columns {
    .col-table-#{$i}  { width: percentage(($i / $grid-columns)); }
  }

}


// 响应设置: 针对桌面分辨率
@media (min-width: $screen-desktop) {
  .container {
    max-width: $container-desktop;
  }
  .col-desktop-1,
  .col-desktop-2,
  .col-desktop-3,
  .col-desktop-4,
  .col-desktop-5,
  .col-desktop-6,
  .col-desktop-7,
  .col-desktop-8,
  .col-desktop-9,
  .col-desktop-10,
  .col-desktop-11,
  .col-desktop-12 {
    float: left;
  }
  @for $i from 1 through $grid-columns {
    .col-desktop-#{$i}  { width: percentage(($i / $grid-columns)); }
  }
  
}

// 响应设置: 针对宽屏桌面分辨率
@media (min-width: $screen-large-desktop) {
  .container {
    max-width: $container-large-desktop;
  }
}


// 平衡柵格高度
.equalize { overflow:hidden; }

.equalize > [class*="col"] {
    padding-bottom:32767px;
    margin-bottom:-32767px;
}

/* END Layout */